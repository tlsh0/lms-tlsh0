// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider                = "prisma-client-js"
    previewFeatures         = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider                = "mysql"
    url                     = env("DATABASE_URL")
    relationMode            = "prisma"
}

model StudentProfile  {
    id                      String                  @unique @db.VarChar(256)
    IIN                     String?                 @db.Text
    activeCourses           Course[]
    membership              Membership[]
    receipts                Receipts[]
}

model Membership {
    id                      String                  @unique @default(uuid())
    studentProfileId        String?                 @unique
    studentProfile          StudentProfile?         @relation(fields: [studentProfileId], references: [id]) 
    comment                 String?

    purchasedTime           DateTime
    startedAt               DateTime
    endsAt                  DateTime

    @@index([id])
    @@index([studentProfileId])
}

model Receipts {
    id                      String                  @id @default(uuid())
    receiptUrl              String
    userId                  String
    uploadedAt              DateTime                @default(now())

    StudentProfileId        String?
    StudentProfile          StudentProfile?         @relation(fields: [StudentProfileId], references: [id]) 
    
    @@index([StudentProfileId])
}

model Course {
    id                      String                  @id @default(uuid())
    userId                  String
    title                   String                  @db.Text
    description             String?                 @db.Text
    imageUrl                String?                 @db.Text
    price                   Float?
    isPublished             Boolean                 @default(false)

    studentProfileId        String?
    studentProfile          StudentProfile?         @relation(fields: [studentProfileId], references: [id])

    chapters                Chapter[]
    attachments             Attachment[]
    purchases               Purchase[]

    createdAt               DateTime                @default(now())
    updateAt                DateTime                @updatedAt

    @@index([studentProfileId])
    @@fulltext([title])
}

model Attachment {
    id                      String                  @id @default(uuid())
    name                    String
    url                     String                  @db.Text

    courseId                String
    course                  Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)

    createdAt               DateTime                @default(now())
    updatedAt               DateTime                @updatedAt

    @@index([courseId])
}

model Chapter {
    id                      String                  @id @default(uuid())
    title                   String
    description             String?                 @db.Text
    videoUrl                String?                 @db.Text
    position                Int
    isPublished             Boolean                 @default(false)
    isFree                  Boolean                 @default(false)

    muxData                 MuxData?

    courseId                String
    course                  Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)

    userProgress            UserProgress[]
    tasks                   Task[]

    createdAt               DateTime                @default(now())
    updateAt                DateTime                @updatedAt()

    @@index([courseId])
}

model Task {
    id                      String                  @id @default(uuid())
    title                   String
    description             String?                 @db.Text
    videoUrl                String?                 @db.Text
    position                Int
    isPublished             Boolean                 @default(false)
    isFree                  Boolean                 @default(false)

    muxData                 MuxData?
    userProgress            UserProgress?

    chapterId               String?
    chapter                 Chapter?                @relation(fields: [chapterId], references: [id], onDelete: Cascade)

    createdAt               DateTime                @default(now())
    updateAt                DateTime                @updatedAt()

    @@index([chapterId])
}

model MuxData {
    id                      String                  @id @default(uuid())
    assetId                 String
    playbackId              String?

    chapterId               String                  @unique
    chapter                 Chapter                 @relation(fields: [chapterId], references: [id], onDelete: Cascade)

    taskId                  String?                 @unique
    task                    Task?                   @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model UserProgress {
    id                      String                  @id @default(uuid())
    userId                  String                  @unique
  
    chapterId               String
    chapter                 Chapter                 @relation(fields: [chapterId], references: [id], onDelete: Cascade)

    taskId                  String                  @unique
    task                    Task                    @relation(fields: [taskId], references: [id])

    isCompleted             Boolean                 @default(false)

    createdAt               DateTime                @default(now())
    updateAt                DateTime                @updatedAt()

    @@index([chapterId])
    @@index([taskId])
    @@unique([userId, chapterId])
}

model Purchase {
    id                      String                  @id @default(uuid())
    userId                  String

    courseId                String
    course                  Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)

    createdAt               DateTime                @default(now())
    updateAt                DateTime                @updatedAt()

    @@index([courseId])
    @@unique([userId, courseId])
}

model StripeCustomer {
    id                      String                  @id @default(uuid())
    userId                  String                  @unique
    stripeCustomerId        String                  @unique

    createdAt               DateTime                @default(now())
    updatedAt               DateTime                @updatedAt
}